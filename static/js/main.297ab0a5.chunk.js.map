{"version":3,"sources":["components/Field.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["debounce","lodashDebounce","fn","Field","props","useState","querystring","parse","window","location","search","substr","params","Array","isArray","unitNumber","join","content","setContent","defaultContent","transform","setTransform","fontSize","setFontSize","ref","useRef","resizeTextArea","useCallback","current","currentFontSize","innerWidth","textareaWidth","newFontSize","clientWidth","useEffect","resizeListener","addEventListener","removeEventListener","style","defaultValue","contentEditable","onInput","event","value","target","innerText","history","pushState","stringify","App","className","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAKMA,EAAWC,KAAe,SAACC,GAC/BA,MACC,KA6CI,IAAMC,EAAsB,SAACC,GAAW,IAAD,EAC3BC,oBAAS,WACxB,OAAOC,IAAYC,MAAMC,OAAOC,SAASC,OAAOC,OAAO,OADlDC,EADqC,sBAIdP,oBAAS,WAAO,IAAD,EAC3C,OAAOQ,MAAMC,QAAQF,EAAOG,YACxBH,EAAOG,WAAWC,KAAK,KADpB,UAEFJ,EAAOG,kBAFL,QAEmB,YAPgB,mBAIrCE,EAJqC,KAI5BC,EAJ4B,OASnBb,mBAASY,GAA3BE,EATqC,sBAUVd,oBAAS,iBAnBpC,MASqC,mBAUrCe,EAVqC,KAU1BC,EAV0B,OAWZhB,mBAAS,IAXG,mBAWrCiB,EAXqC,KAW3BC,EAX2B,KAYtCC,EAAMC,iBAAwB,MAE9BC,EAAiBC,uBAAY,WACjC,GAAKH,EAAII,QAAT,CAIA,IArDFC,EACAC,EACAC,EAmDQC,GArDRH,EAsDIP,EArDJQ,EAsDItB,OAAOsB,WArDXC,EAsDIP,EAAII,QAAQK,YAlDa,IAAVH,EASFC,EACU,IAAlBF,EACEE,EAZkB,GAAVD,EAaQ,KAAlBD,EAGFA,GAqCLN,EAAYS,MACX,CAACV,IAEJY,qBAAU,WACRR,MACC,CAACT,EAASK,IAEbY,qBAAU,WACR,IAAMC,EAAiB,WACrBT,IACAL,EA3CG,KA+CL,OADAb,OAAO4B,iBAAiB,SAAUD,GAC3B,WACL3B,OAAO6B,oBAAoB,SAAUF,MAEtC,IAEH,IAAMG,EAAQ,CACZhB,WACAF,aAGF,OACI,0BACEI,IAAKA,EACLc,MAAOA,EACPC,aAActB,EACduB,iBAAe,EACfC,QAAS,SAACC,GAER,IAAMC,EAAQD,EAAME,OAAOC,UAC3B7C,GAAS,WACPY,EAAOG,WAAa4B,EACpBnC,OAAOsC,QAAQC,UACb,CAAE9B,QAAS0B,GACX,GACA,IAAMrC,IAAY0C,UAAUpC,IAE9BM,EAAWyB,QAGfxB,IC3GO8B,G,MARH,WACV,OACE,yBAAKC,UAAU,OACX,kBAAC,EAAD,SCKYC,QACW,cAA7B3C,OAAOC,SAAS2C,UAEe,UAA7B5C,OAAOC,SAAS2C,UAEhB5C,OAAOC,SAAS2C,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.297ab0a5.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\n\nimport lodashDebounce from 'lodash.debounce';\nimport querystring from 'querystring';\n\nconst debounce = lodashDebounce((fn: () => void) => {\n  fn();\n}, 500);\n\n/**\n * goal is to fill the screen\n * \n * Given the width of a screen, and the width of the textarea, how big of a textarea do I need to change the screen?\n * textarea width should be as close to innerWidth as possible\n * \n * Should also consider the height, if its taller than the screen it's also useless, but I don't think that would ever happen\n */\nfunction calculateFontSize(\n  currentFontSize: number,\n  innerWidth: number,\n  textareaWidth: number,\n): number {\n  const margin = 0.20;\n  const lowerBound = innerWidth * (1 - margin);\n  const upperBound = innerWidth * (1 + margin);\n\n  // console.log({\n  //   innerWidth,\n  //   lowerBound,\n  //   upperBound,\n  //   textareaWidth,\n  // });\n\n  if (upperBound < textareaWidth) {\n    return currentFontSize * 0.85;\n  } else if (textareaWidth < lowerBound) {\n    return currentFontSize * 1.15;\n  }\n\n  return currentFontSize;\n}\n\nfunction calculateTransform() {\n  return '';\n  // console.log(window.innerWidth / window.innerHeight);\n  if ((window.innerWidth / window.innerHeight) < 0.55) {\n    return 'rotate(90deg)'\n  } else {\n    return '';\n  }\n}\n\nexport const Field: React.FC<{}> = (props) => {\n  const [params] = useState(() => {\n    return querystring.parse(window.location.search.substr(1));\n  });\n  const [content, setContent] = useState(() => {\n    return Array.isArray(params.unitNumber)\n      ? params.unitNumber.join(' ')\n      : (params.unitNumber ?? 'F-7-24');\n  });\n  const [defaultContent] = useState(content);\n  const [transform, setTransform] = useState(() => calculateTransform());\n  const [fontSize, setFontSize] = useState(16);\n  const ref = useRef<HTMLSpanElement>(null);\n\n  const resizeTextArea = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    const newFontSize = calculateFontSize(\n      fontSize,\n      window.innerWidth,\n      ref.current.clientWidth\n    )\n    setFontSize(newFontSize);\n  }, [fontSize]);\n\n  useEffect(() => {\n    resizeTextArea();\n  }, [content, fontSize]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    const resizeListener = () => {\n      resizeTextArea();\n      setTransform(calculateTransform());\n    };\n\n    window.addEventListener('resize', resizeListener);\n    return () => {\n      window.removeEventListener('resize', resizeListener);\n    };\n  }, []);; // eslint-disable-line react-hooks/exhaustive-deps\n\n  const style = {\n    fontSize,\n    transform,\n  };\n\n  return (\n      <span\n        ref={ref}\n        style={style}\n        defaultValue={content}\n        contentEditable\n        onInput={(event) => {\n          // @ts-ignore\n          const value = event.target.innerText;\n          debounce(() => {\n            params.unitNumber = value;\n            window.history.pushState(\n              { content: value },\n              '',\n              '?' + querystring.stringify(params),\n            );\n            setContent(value);\n          });\n        }}\n      >{defaultContent}</span>\n  );\n}","import React from 'react';\nimport { Field } from './components/Field';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n        <Field />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}